{
	"title": "Integrate Pages - Builder.io",
	"url": "https://www.builder.io/c/docs/integrating-builder-pages",
	"html": "Integrate Pages\n\nAs a developer, you can integrate Builder into your codebase and give other team members, such as content editors, marketers, and designers, the ability to build and manage pages without ever having to ping you.\n\nThis guide is detailed. If you're using React, Next.js, Remix, Angular with standalone components, or Qwik and you'd prefer a more automated process, visit Developer Quickstart, which uses Devtools to integrate for you.\n\nAdd Builder as a dependency\n\nWe highly recommend that you integrate Builder into an existing app, and these instructions assume you already have one. However, if you need to create an app, and would like instructions, visit Creating an App.\n\nFramework\nReact\n​\nMeta-Framework\nNext.js (Pages Router)\n​\nSDK Generation\nGen 1\n​\n\nWant a shortcut? Get going right away with Builder and Next.js; use Builder's Devtools for Automatic Integration. Devtools fully automates your integration, so you don't have to take the steps in the rest of this document.\n\nIf you choose not to use the built-in Builder integration with Next.js with Devtools, continue with the instructions below.\n\nAt the command line, at the root of your project, use npm to install the Builder SDK:\n\nnpm install @builder.io/react\n\nIf you're using Windows, be sure to use quotes when you install dependencies that use the @ operator; for example, npm install \"@builder.io/react\".\n\nStart the development server:\n\nnpm run dev\nAdd a Builder component to your app\nFramework\nReact\n​\nMeta-Framework\nNext.js (Pages Router)\n​\nSDK Generation\nGen 1\n​\n\nPaste the following code into a new file within the pages directory called [...page].tsx (you must include the brackets and dots), making sure to replace YOUR_API_KEY with your Public API Key.\n\nTip: If you don't have a pages directory, be sure to create one.\n\nThis code gets your Page from Builder and displays the page between the header and footer. As a best practice, the header and footer reside in the codebase, as in this example.\n\n// pages/[...page].tsx\nimport React from \"react\";\nimport { useRouter } from \"next/router\";\nimport { BuilderComponent, builder, useIsPreviewing } from \"@builder.io/react\";\nimport { BuilderContent } from \"@builder.io/sdk\";\nimport DefaultErrorPage from \"next/error\";\nimport Head from \"next/head\";\nimport { GetStaticProps } from \"next\";\n\n// Replace with your Public API Key\nbuilder.init(YOUR_API_KEY);\n\n// Define a function that fetches the Builder\n// content for a given page\nexport const getStaticProps: GetStaticProps = async ({ params }) => {\n  // Fetch the builder content for the given page\n  const page = await builder\n    .get(\"page\", {\n      userAttributes: {\n        urlPath: \"/\" + ((params?.page as string[])?.join(\"/\") || \"\"),\n      },\n    })\n    .toPromise();\n\n  // Return the page content as props\n  return {\n    props: {\n      page: page || null,\n    },\n    // Revalidate the content every 5 seconds\n    revalidate: 5,\n  };\n};\n\n// Define a function that generates the\n// static paths for all pages in Builder\nexport async function getStaticPaths() {\n  // Get a list of all pages in Builder\n  const pages = await builder.getAll(\"page\", {\n    // We only need the URL field\n    fields: \"data.url\",\n    options: { noTargeting: true },\n  });\n\n  // Generate the static paths for all pages in Builder\n  return {\n    paths: pages.map((page) => `${page.data?.url}`).filter(url => url !== '/'),\n    fallback: 'blocking',\n  };\n}\n\n// Define the Page component\nexport default function Page({ page }: { page: BuilderContent | null }) {\n  const router = useRouter();\n  const isPreviewing = useIsPreviewing();\n\n  // If the page content is not available\n  // and not in preview mode, show a 404 error page\n  if (!page && !isPreviewing) {\n    return <DefaultErrorPage statusCode={404} />;\n  }\n\n  // If the page content is available, render\n  // the BuilderComponent with the page content\n  return (\n    <>\n      <Head>\n        <title>{page?.data?.title}</title>\n      </Head>\n      {/* Render the Builder page */}\n      <BuilderComponent model=\"page\" content={page || undefined} />\n    </>\n  );\n}\n\n\n\nA later section in this tutorial guides you through getting your Public API Key from the Account section of Builder. When you have your Public API Key be sure to add it to the builder.init() method in this code snippet. The API Key is required for connecting your app to Builder.\n\nTip: If you don't have an index route, such as pages/index.tsx , use pages/[[...page.tsx]] with two sets of square brackets. The two square brackets means that Builder handles the app's home page.\n\nThe single set of square brackets, in this tutorial, assumes that you are keeping your home page.\n\nThe BuilderComponent accepts several props for customization. One important prop for client-side routing is renderLink, which means you can implement custom routing. For more information on renderLink and other props, visit the renderLink entry in Using BuilderComponent.\n\nHere's an example of how you might use the renderLink prop:\n\n<BuilderComponent \n  model=\"page\" \n  content={content} \n  renderLink={(props) => <CustomLink {...props} />}\n/>\n\nUnderstanding the code\n\nAfter the imports, you specify the Builder Public API Key and, with builder.init(), connect your app to Builder.\n\nTip: Though it's not the syntax this example uses, if you're using the process.env syntax with Next.js for API keys and SDK initialization, be sure to prefix it with NEXT_PUBLIC_, as described in the Next.js documentation for Exposing Environment Variables to the Browser.\n\nBuilding paths with getStaticProps()\n\nThe getStaticProps() function tells you what paths the app is building. Here, Builder gets the page and creates the URL, otherwise, if there's no page, you'll get null and a 404.\n\nexport async function getStaticProps({ params }) {\n  const page = await builder\n    .get('page', {\n      userAttributes: {\n        urlPath: '/' + (params?.page?.join('/') || ''),\n      },\n    })\n    .toPromise();\n\n  return {\n    props: {\n      page: page || null,\n    },\n    revalidate: 5\n  };\n}\n\n\nrevalidate: 5 means that Next.js attempts to re-generate the page under these conditions:\n\nWhen a request comes in\nAt most once every 5 seconds\nTo check if Builder has updates to the page\nGetting a list of pages with getStaticPaths()\n\nThe getStaticPaths() function returns a list of page URLs, omits unnecessary data for creating the list, and with fallback: true, checks Builder for any new pages you might have added.\n\nexport async function getStaticPaths() {\n  const pages = await builder.getAll('page', {\n    options: { noTargeting: true },\n  });\n\n  return {\n    paths: pages.map(page => `${page.data?.url}`),\n    fallback: true,\n  };\n}\n\nThe React component\n\nThe last section is a React component called Page(). It gets the page data and checks that Builder is present. If there's no page and no Builder, you get a 404. Otherwise, you get your Builder page.\n\nNext, this snippet renders the title field to be the page title. You can also add your own custom fields to render other information; for example, for SEO metadata.\n\nexport default function Page({ page }) {\n  const router = useRouter();\n  const isPreviewing = useIsPreviewing();\n\n  if (router.isFallback) {\n    return <h1>Loading...</h1>\n  }\n\n  if (!page && !isPreviewing) {\n    return <DefaultErrorPage statusCode={404} />\n  }\n\n  return (\n    <>\n      <Head>\n        <title>{page?.data.title}</title>\n      </Head>\n\n      <BuilderComponent model=\"page\" content={page} />\n    </>\n  );\n}\n\n\nUsing your app with Builder\nFramework\nReact\n​\nMeta-Framework\nNext.js (Pages Router)\n​\nSDK Generation\nGen 1\n​\n\nBuilder adds the ability for your team members–even those who don't code–to create and iterate on ideas with a drag-and-drop interface.\n\nHead over to Builder.io to sign up for an account if you don't already have one. Come back when you're logged in.\n\nThis next video covers the steps in this section of the tutorial all in one place to give you an idea of how it all works and the end result. This example uses Next.js but all frameworks use the same process:\n\nGetting your API Key\n\nTo connect your Builder.io space to your application, add the Public API key to your code.\n\nFind your Public API Key within Builder.io in one of two ways:\n\nPress Cmd/Ctrl+k in Builder to bring up the command palette and search for API Key. Clicking the Public API Key copies it to your clipboard.\nGo to Account Settings and copy your Public API Key.\n\nFor more detail about the Public API Key, see Using Builder API Keys.\n\nPaste the Public API Key into your app by replacing the YOUR_API_KEY placeholder in your code. This location varies depending on your framework and is covered in the earlier sections of this tutorial. Make sure to wrap your Public API Key in quotes.\n\nThe following video shows copying the Public API Key and pasting it into a Next.js app.\n\nSetting the model preview URL\n\nTo enable Builder to open your site in the Visual Editor, provide a URL that Builder can open which has the Builder rendering component in it.\n\nGo to Models and choose the Page model.\nSet the Preview URL to http://localhost:<your-port>, where <your-port> is the port your app is using. Be sure to include the http://.\nClick Save.\n\nThe following video shows these steps:\n\nCreating a Builder Page\n\nCreate a Builder Page to use with your integrated app.\n\nGo to Content.\nClick the +New button near the top right of the screen.\nCreate a new Page in Builder and name it Test Page. Notice that Builder automatically generates the path as /test-page.\nThe Editor for your new Page loads automatically.\nIn your new Page, drag in a Text block.\nClick Edit and add something like, \"I did it!!\".\nClick the Publish button in the upper right of the browser.\n\nThe next video shows creating a Page in a Builder-integrated app and dragging in a text block:\n\nAfter you deploy your updates, be sure to update this to a public URL, such as your live site or your staging site; for example, https://your-site.com, so anyone on your team can connect to your site for visual editing.\n\nGo to http://localhost:<your-port>/test-page and check out your work. Well done!\n\nIf you're getting a 404 but aren't sure why, check these things:\n\nMake sure you've published your page in Builder by clicking the Publish button on the upper right corner.\nCheck the URL. If you name the page test2 for example, Builder adds a hyphen, so that the URL segment is test-2.\nMake sure that you've set the preview URL on the Page Model.\nFor some frameworks, you might have to restart the dev server.\n\nFor more information regarding special use cases, visit Integration Tips.\n\nBuilder Pages best practice\n\nWe recommend that you place your Builder pages between your header and footer. A common use case is developers keeping headers and footers in their codebase while integrating page building. In this way, non-developer team members can iterate on pages, without having to rely on developers.\n\nTo use Builder pages between your header and footer, follow the guidance below for your framework:\n\nFramework\nReact\n​\nMeta-Framework\nNext.js (Pages Router)\n​\nSDK Generation\nGen 1\n​\n\nImport your header and footer along with the other JavaScript imports at the top of [...page].jsx.\n\nAdd the header and footer components before and after BuilderComponent.\n\n+ import MyHeader from '../components/my-header'\n+ import MyFooter from '../components/my-footer'\n\n export default function Page({ page }) {\n   ...\n   return (\n     <>\n       <Head>\n         <title>{page?.data.title}</title>\n       </Head>\n\n+      <MyHeader />\n       <BuilderComponent model=\"page\" content={page} />\n+      <MyFooter />\n     </>\n   );\n }\n\n\nWhat's next\nFramework\nReact\n​\nMeta-Framework\nNext.js (Pages Router)\n​\nSDK Generation\nGen 1\n​\n\nWith your app and Builder working together, the next step is the fun part–add some pages in Builder and drag in some elements. Play with styles and explore the UI.\n\nDeploy your updated app to a preview environment\n\nIntegrate Custom Components\n\nIntegrate Design Tokens\n"
}