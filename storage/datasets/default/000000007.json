{
	"title": "Integrating Sections - Builder.io",
	"url": "https://www.builder.io/c/docs/integrate-section-building",
	"html": "Integrate Sections\n\nYou can use Builder Sections to create reusable content across multiple pages. You can manage the code within your codebase, and teammates in the UI can iterate in the Visual Editor.\n\nExamples include:\n\nBlog Article\nHero Section\nAnnouncement Bar\nProduct Editorial\nHomepage\n\nThis tutorial shows you how to create and add an announcement bar section to a page.\n\nFor more conceptual information Section Models, refer to the Section Models documentation.\n\nPrerequisites\n\nTo follow along with this tutorial, you should have the following:\n\na Builder account\nan app in the framework of your choice with the appropriate Builder SDK installed\nAdd an announcement bar section to your app\nFramework\nReact\n​\nMeta-Framework\nNext.js (Pages Router)\n​\nSDK Generation\nGen 1\n​\n\nCreate a page with the following contents. Make sure to replace YOUR_API_KEY with your Public API Key:\n\n// pages/[...page].tsx\nimport React from \"react\";\nimport { useRouter } from \"next/router\";\nimport { BuilderComponent, builder, useIsPreviewing } from \"@builder.io/react\";\nimport { BuilderContent } from \"@builder.io/sdk\";\nimport { GetStaticProps } from \"next\";\n\n// Replace with your Public API Key\nbuilder.init(YOUR_API_KEY);\n\n// Define a function that fetches the Builder\n// content for a given page\nexport const getStaticProps: GetStaticProps = async ({ params }) => {\n  // Fetch the builder content for the given model\n  const announcementBar = await builder\n    .get(\"announcement-bar\", {\n      userAttributes: {\n        urlPath: \"/\" + ((params?.page as string[])?.join(\"/\") || \"\"),\n      },\n    })\n    .toPromise();\n\n  // Return the announcement bar content as props\n  return {\n    props: {\n      announcementBar: announcementBar || null,\n    },\n    // Revalidate the content every 5 seconds\n    revalidate: 5,\n  };\n};\n\n// Define the announcement bar component\nexport default function announcementBar({ announcementBar }: { page: BuilderContent | null }) {\n  const router = useRouter();\n  const isPreviewing = useIsPreviewing();\n\n  // If the announcement bar is available, render\n  // the BuilderComponent with the content\n\n  return (\n    <>\n      {/* Render the announcement bar */}\n      <BuilderComponent model=\"announcement-bar\" content={announcementBar || undefined} />\n    </>\n  );\n}\n\n\n\nThe BuilderComponent accepts several props for customization. One important prop for client-side routing is renderLink, which means you can implement custom routing. For more information on renderLink and other props, visit the renderLink entry in Using BuilderComponent.\n\nHere's an example of how you might use the renderLink prop:\n\n<BuilderComponent \n  model=\"page\" \n  content={content} \n  renderLink={(props) => <CustomLink {...props} />}\n/>\n\n\nSections are typically targeted using some information about the user's state.\n\nFor instance, you can display an announcement bar when the user visits particular URLs. With custom targeting attributes, you can even display content based on complex conditions, such as when a user adds a particular item to their cart.\n\nAside from targeting, you can also query sections by custom fields.\n\nconst urlPath = '/' + (params?.page?.join('/') || '');\n\nconst announce = await builder\n    .get('announcement-bar', { userAttributes: { urlPath } })\n    .toPromise();\n\n\nThe announcement bar section in the example above is targeted with the current URL using the urlPath targeting attribute. When Builder finds an announcement bar with a matching URL, it responds with that announcement bar's content.\n\nThe snippet below demonstrates how the announcement bar is rendered in the context of the page.\n\nreturn (\n  <>\n    <!-- Put your header here -->\n    <YourHeader />\n    <BuilderComponent model=\"announcement-bar\" content={announce} />\n    <!-- The rest of your page -->\n    <TheRestOfYourPage />`\n  </>\n);\n\n\nBuilderComponent receives the content for the announcement bar through the content prop and renders it next to your page's content.\n\nYou can also render a Builder-managed page next to your announcement bar or any other section by placing multiple BuilderComponent instances next to each other.\n\nCheck out How to Create a Page for a step-by-step tutorial on how to create a page in Builder and Integrating Pages on how to render your page content within your template.\n\nCreating a Section model\n\nCreate a Section model so you can make an announcement bar content entry.\n\nGo to Models.\nClick +Create Model.\nSelect Section.\nEnter Announcement bar as the name for your new Section model.\nFor all frameworks except Swift: change the Preview URL on the Model Options page to the URL of the page that you added code to display your section. This example uses http://localhost:####/announcements, but yours might be different.\nClick Save.\n\nThe video below demonstrates this process:\n\nWhen you create or edit an announcement bar section, the Visual Editor displays your content embedded within your Preview URL page, providing visual context and importing styles from your site. It's a live view of your section, as it will look on one of your pages when you publish.\n\nPublished Sections typically appear across multiple pages with different URLs depending on how they're targeted. When previewing in the editor, however, they only appear within the Preview URL's page. For more information, refer to Editing and Previewing Your Site.\n\nFor more information what Section Models are and how to use them, refer to the Section Models documentation.\n\nCreating an announcement bar content entry\n\nNow that your Section model is set up, you can create an announcement bar content entry to add an announcement bar to your site.\n\nGo to Content.\nClick the + New Entry button and select Announcement bar.\nBuild and style your announcement bar.\nName the content entry.\nClick Publish.\n\nThe video below demonstrates this process:\n\nTargeting by URL path\n\nTo make your announcement bar display based on targeting, in the section content entry; for example, in the announcement bar:\n\nClick on the Targeting icon.\nFor Where, select URL path.\nAdd the URL path you'd like to target.\nClick the Publish button.\n\nThe video below shows this process in an integrated Remix app where the targeted URL path is /builder so that the announcement bar doesn't show up on any other URLs. This process is the same, regardless of the framework you use. The URL path you target, however, might differ.\n\nIf you're using Gatsby, you might need to restart your app to render the announcement bar.\n\nLive previewing custom fields and Data models\n\nWhen working with sections that use custom fields or data models, it's helpful to set up live previewing. In this way you get real-time updates in the Visual Editor without having to publish your changes.\n\nFor detailed instructions on setting up live previewing for your custom fields and data models, visit Live Previewing Data Models and Custom Fields.\n\nWhat's next\nFramework\nReact\n​\nMeta-Framework\nNext.js (Pages Router)\n​\nSDK Generation\nGen 1\n​\n\nWith your app and Builder working together, the next step is the fun part–add some more Sections in Builder and drag in some elements. Play with styles and explore the UI.\n\nDeploy your updated app to a preview environment\n\nIntegrate Custom Components\n\nIntegrate Design Tokens\n"
}